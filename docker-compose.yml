version: '3.8'

services:
  # PostgreSQL Database (optional if using Supabase cloud)
  postgres:
    image: postgres:15-alpine
    container_name: telegram_bot_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-telegram_bot_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - telegram_bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  api:
    build:
      context: .
      args:
        - REQUIREMENTS_FILE=requirements-backend.txt
    container_name: telegram_bot_api
    command: python -m uvicorn app.api:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - TWITTER_CLIENT_ID=${TWITTER_CLIENT_ID}
      - TWITTER_CLIENT_SECRET=${TWITTER_CLIENT_SECRET}
      - TWITTER_ACCOUNT_ID=${TWITTER_ACCOUNT_ID}
      - TWITTER_USERNAME=${TWITTER_USERNAME}
    volumes:
      - ./app:/app/app
      - ./frontend:/app/frontend
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - telegram_bot_network
    restart: unless-stopped

  # Telegram Bot
  bot:
    build:
      context: .
      args:
        - REQUIREMENTS_FILE=requirements-bot.txt
    container_name: telegram_bot
    command: python app/telegram_bot.py
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    volumes:
      - ./app:/app/app
    depends_on:
      - api
      - postgres
    networks:
      - telegram_bot_network
    restart: unless-stopped

  # Nginx (Web Server for Frontend)
  nginx:
    image: nginx:alpine
    container_name: telegram_bot_nginx
    ports:
      - "80:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
    networks:
      - telegram_bot_network
    restart: unless-stopped

networks:
  telegram_bot_network:
    driver: bridge

volumes:
  postgres_data:
